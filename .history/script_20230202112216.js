'use strict';

/////////////////////////////////////////////////
/////////////////////////////////////////////////

// /////////////////////////////////////////////////
// /////////////////////////////////////////////////
// // LECTURES

// const currencies = new Map([
//   ['USD', 'United States dollar'],
//   ['EUR', 'Euro'],
//   ['GBP', 'Pound sterling'],
// ]);

// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// /////////////////////////////////////////////////

// // 1
// let arr = ['a', 'b', 'c', 'd', 'e'];

// // SLICE . –ú–µ—Ç–æ–¥ slice() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–ø–∏—é —á–∞—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
// //// SYNTAX  arr.slice([begin[, end]])

// console.log(arr.slice(2)); // c, d, e
// console.log(arr);
// console.log(arr.slice(2, 4)); // c, d
// console.log(arr.slice(-2)); // d, e
// console.log(arr.slice(-1)); // LAST ELEM e
// console.log(arr.slice(1, -2)); // b, c

// console.log(arr.slice()); // ¬†['a', 'b', 'c', 'd', 'e']  –ö–æ–ø–∏—Ä—É–µ—Ç –≤–µ—Å—å –º–∞—Å—Å–∏–≤
// console.log([...arr]); // ¬†['a', 'b', 'c', 'd', 'e']  –ö–æ–ø–∏—Ä—É–µ—Ç –≤–µ—Å—å –º–∞—Å—Å–∏–≤ SPREAD

// // SPLICE –ú–µ—Ç–æ–¥ splice() –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–∞, —É–¥–∞–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏/–∏–ª–∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ.
// // // SYNTAX  array.splice(start[, deleteCount[, item1[, item2[, ...]]]])

// // console.log(arr.splice(2)); // c, d, e
// arr.splice(-1); // —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ
// console.log(arr); //  ['a', 'b', 'c', 'd']
// arr.splice(1, 2); // —É–¥–∞–ª—è–µ—Ç 2 —ç–ª–µ–º–µ–Ω—Ç–∞ , –Ω–∞—á–∏–Ω–∞—è —Å 1
// console.log(arr); // [a, d]

// // REVERSE  . –ú–µ—Ç–æ–¥ reverse() –Ω–∞ –º–µ—Å—Ç–µ –æ–±—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞. –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –ø–µ—Ä–≤—ã–º.
// ///// SYNTAX  array.reverse()

// arr = ['a', 'b', 'c', 'd', 'e'];
// const arr2 = ['j', 'i', 'h', 'g', 'f'];
// console.log(arr2.reverse()); //['f', 'g', 'h', 'i', 'j']
// console.log(arr2); // –ò–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ ['f', 'g', 'h', 'i', 'j']

// // CONCAT / –ú–µ—Ç–æ–¥ concat() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –º–∞—Å—Å–∏–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω,
// //             —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Å –¥—Ä—É–≥–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –∏/–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
// // SYNTAX   var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])

// const letters = arr.concat(arr2);
// console.log(letters); // ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
// console.log([...arr, ...arr2]); //  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

// // JOIN  –ú–µ—Ç–æ–¥ join() –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ (–∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞) –≤ —Å—Ç—Ä–æ–∫—É.
// // SYNTAX
// console.log(letters.join(' - ')); // a - b - c - d - e - f - g - h - i - j

// // LECtion 2 . at
// const arr = [23, 11, 64];
// console.log(arr[0]); // 23
// console.log(arr.at(0)); // 23 at position 0

// // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º –≤ –º–∞—Å—Å–∏–≤–µ
// console.log(arr[arr.length - 1]); // 64
// console.log(arr.slice(-1)[0]); // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º –≤ –º–∞—Å—Å–∏–≤–µ

// console.log(arr.at(-1)); // 64
// console.log('jonas'.at(0)); // j –¢–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏

// LECT 3. –ú–µ—Ç–æ–¥ forEach() –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ.
// SYNTAX .arr.forEach(function callback(currentValue, index, array) {
//your iterator
// }[, thisArg]);
// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// // for (const movement of movements) {
// for (const [i, movement] of movements.entries()) {
//   if (movement > 0) {
//     console.log(`Movement ${i + 1}: You deposited ${movement}`);
//   } else {
//     console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`); // Math.abs - —É–¥–∞–ª–∏—Ç –∑–Ω–∞–∫ –ú–ò–ù–£–°
//   }
// }
// console.log('----FOREACH-----');
// // callback –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
// movements.forEach(function (movement, index, array) {
//   if (movement > 0) {
//     console.log(`Movement ${index + 1}: You deposited ${movement}`);
//   } else {
//     console.log(`Movement ${index + 1}: You withdrew ${Math.abs(movement)}`); // Math.abs - —É–¥–∞–ª–∏—Ç –∑–Ω–∞–∫ –ú–ò–ù–£–°
//   }
// });
// // 0: function(200)
// // 1: function(450)
// // 2: function(400)
// // ....

// LECT 4 . forEach with Map and Set

// const currencies = new Map([
//   ['USD', 'United States dollar'], // 'key', 'value'
//   ['EUR', 'Euro'],
//   ['GBP', 'Pound sterling'],
// ]);

// currencies.forEach(function (value, key, map) {
//   console.log(`${key}: ${value}`);
// });

// // Set
// const currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);
// console.log(currenciesUnique); // {'USD', 'GBP', 'EUR'}

// currenciesUnique.forEach(function (value, _, map) {
//   console.log(`${value}: ${value}`); // USD: USD ,GBP: GBP ,EUR: EUR
// });
//////////////////////////////////////////////////////////////////////////////////////////////

// BANKIST APP

// Data
const account1 = {
  owner: 'Jonas Schmedtmann',
  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
  interestRate: 1.2, // %
  pin: 1111,
};

const account2 = {
  owner: 'Jessica Davis',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,
};

const account3 = {
  owner: 'Steven Thomas Williams',
  movements: [200, -200, 340, -300, -20, 50, 400, -460],
  interestRate: 0.7,
  pin: 3333,
};

const account4 = {
  owner: 'Sarah Smith',
  movements: [430, 1000, 700, 50, 90],
  interestRate: 1,
  pin: 4444,
};

const accounts = [account1, account2, account3, account4];

// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

const displayMovements = function (movements) {
  containerMovements.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –ø–æ–ª—è –†–∞—Å—Ö–æ–¥—ã –ü—Ä–∏–±—ã–ª—å

  movements.forEach(function (mov, i) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ Movements
    // –∞–Ω–∞–ª–æ–≥ .....  .textContent = 0;
    const type = mov > 0 ? 'deposit' : 'withdrawal';
    const html = `
  <div class="movements__row">
    <div class="movements__type movements__type--${type}">${i + 1} ${type}</div>
    <div class="movements__value">${mov}</div>
    </div>
  `;

    containerMovements.insertAdjacentHTML('afterbegin', html);
  });
};

displayMovements(account1.movements);
// console.log(containerMovements.innerHTML);

// LECT5.
//  CHALANGE #1
// [3,5,2,12,7] , [4,1, 15,8,3]
// [9,16, 6, 8,3], [10,5,6,1,4]

// const checkDogs = function (dogsJulia, dogsKate) {
//   // Jonas version:
//   // const dogsJuliaCorrected = dogsJulia.slice();
//   // dogsJuliaCorrected.splice(0,1);
//   // dogsJuliaCorrected.splice(-2);
//   // console.log(dogsJuliaCorrected);

//   const juliaCopy = dogsJulia.slice();
//   const juliaCorrecteded = juliaCopy.splice(1, `${juliaCopy.length}` - 3, -1); // —É–¥–∞–ª—è–µ–º –ü–µ—Ä–≤—ã–π –∏ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º (—Å—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ –¥–ª–∏–Ω–∞ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ - 3 —ç–ª–µ–º–º–µ–Ω—Ç–∞)

//   const allDogs = juliaCorrecteded.concat(dogsKate); // –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ 2 –º–∞—Å—Å–∏–≤–∞
//   allDogs.forEach(function (dog, index) {
//     //  callback –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
//     if (dog >= 3) {
//       console.log(
//         `Dog number ${index + 1} is an adult and is ${dog} years old`
//       );
//     } else {
//       console.log(
//         `Dog number ${index + 1} is still a puppy üê∂ and is ${dog} years old`
//       );
//     }
//   });
//   console.log(allDogs);
// };
// // checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);
// checkDogs([9, 16, 6, 8, 3], [10, 5, 6, 1, 4]);

////////////////////////////
////////////////////////////

// LECT 7. MAP method

const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
const eurToUsd = 1.1;

const movementsUSD = movements.map(function (mov) {
  // return mov * eurToUsd;
  return 23;
});
console.log(movements);
console.log(movementsUSD);
